 Exercise 1

 The following function does a thing:

 (defn do-a-thing [x]
   (Math/pow (+ x x) (+ x x)))

   Change the function do-a-thing so that it uses let to give a name to the common expression (+ x x) in its body. 

(defn do-a-thing[x]
        (let [ex (+ x x)]
                  (Math/pow ex ex)))
 

  Exercise 2

  Write the function (spiff v) that takes a vector and returns the sum of the first and third elements of the vector. What happens when you pass in a vector that is too short?

  (spiff [1 2 3])       ;=> 4
  (spiff [1 2 3 4 5 6]) ;=> 4
  (spiff [1 2])         ;=> ?
  (spiff [])            ;=> ?

  (defn spiff [v]
     (+ (get v 0)(get v 2)))


 Exercise 3

 Write the function (cutify v) that takes a vector as a parameter and adds "<3" to its end.

 (cutify []) => ["<3"]
 (cutify [1 2 3]) => [1 2 3 "<3"]
 (cutify ["a" "b"]) => ["a" "b" "<3"]

 (defn cutify [v]
         (conj v "<3"))

 Exercise 4
 Rewrite our earlier function spiff by destructuring its parameter. Call this new function spiff-destructuring. 

 (defn spiff-destructuring [v]
         (let [[x y] [(get v 0) (get v 2)]]
                 (str x y)))

You can destructure function parameters directly. For an example, take the following function:

(defn sum-pairs [first-pair second-pair]
  [(+ (first  first-pair) (first  second-pair))
     (+ (second first-pair) (second second-pair))])

     The function takes two vectors and sums the elements pairwise:

     (sum-pairs [42 5]   [-42 -5])   ;=> [0 0]
     (sum-pairs [64 256] [-51 -219]) ;=> [13 37]

     sum-pair is not very pretty to look at. We can spiff it up by taking out the elements of its parameter vectors by destructuring them:

     (defn sum-pairs [[x1 y1] [x2 y2]]
       [(+ x1 x2) (+ y1 y2)])



Exercise 5
Write the functions (height rectangle) and (width rectangle) that return the height and width of the given rectangle. Use destructuring.
(height (rectangle [1 1] [5 1])) => 0
(height (rectangle [1 1] [5 5])) => 4
(height (rectangle [0 0] [2 3])) => 3

(width (rectangle [1 1] [5 1]))  => 4
(width (rectangle [1 1] [1 1]))  => 0
(width (rectangle [3 1] [10 4])) => 7


(defn height [[[x1 y1][x2 y2]]]
        (let [carre1 (Math/pow (- x2 x2) 2)
              carre2 (Math/pow (- y2 y1)2)
              racine (Math/sqrt (+ carre1 carre2))]
          racine))



(defn width [[[x1 y1][x2 y2]]]
        (let [carre1 (Math/pow (- x2 x1) 2)
              carre2 (Math/pow (- y2 y2)2)
              racine (Math/sqrt (+ carre1 carre2))]
          racine))


Exercise 6
Write the function (square? rectangle) that returns true if rectangle is a square and otherwise false.
(square? (rectangle [1 1] [2 2])) ;=> true
(square? (rectangle [1 1] [2 3])) ;=> false
(square? (rectangle [1 1] [1 1])) ;=> true
(square? (rectangle [3 2] [1 0])) ;=> true
(square? (rectangle [3 2] [1 1])) ;=> false


(defn square? [[[x1 y1][x2 y2]]]
        (let [[p1 p2] [[x1 y1][x2 y2]]]
              (== (height [p1 p2])(width [p1 p2])))


Exercise 7
Write the function (area rectangle) that returns the area of the given rectangle.
(area (rectangle [1 1] [5 1]))  => 0
(area (rectangle [0 0] [1 1]))  => 1
(area (rectangle [0 0] [4 3]))  => 12
(area (rectangle [3 1] [10 4])) => 21

(defn area [[[x1 y1][x2 y2]]]
        (let [[p1 p2][[x1 y1][x2 y2]]]
          (* (width [p1 p2]) (height [p1 p2])))).

