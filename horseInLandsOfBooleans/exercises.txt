Exercise 1:
(defn my-boolean [x]
 (if (or
      (= x nil)
      (= x false)) false
  true
 ))

Ex.2: Write the function (teen? age), which returns truthy if age is at least 13 and at most 19. Use only one comparison operator and give it three arguments.
    (defn teen? [age]
     (if (< 12 age < 20) true false))

    Exercise 3

    Write the function (abs n), which returns the absolute value of n, i.e. if n<0
    , the value of (abs n) is âˆ’n, and otherwise n.

    (defn abs [n]
     (if(> n 0) n (- n)))

    Exercise 4

    Write the function (divides? divisor n), which returns true if divisor divides n and false otherwise.

    (mod num div) returns 0 if div divides num exactly:

    (mod 10 5) ;=> 0
    (mod 3 2)  ;=> 1

    (divides? 2 4) ;=> true
    (divides? 4 2) ;=> false

    (defn divides? [divisor n]
     (if (= 0 (mod n divisor)) true false))

    COND: the cond built-in function replaces multiple/nested if clauses:
    (cond
     condition1 true1
     condition2 true2
     ...
     :else      true..
    )

    Exercise 5

    Write the function (fizzbuzz n) that returns

    "fizz" when n is divisible by 3,
    "buzz" when n is divisible by 5,
    "gotcha!" when n is divisible by 15, and
    the empty string "" otherwise.

    Use the divides? function from the previous exercise.

    (fizzbuzz 2)  ;=> ""
    (fizzbuzz 45) ;=> "gotcha!"
    (fizzbuzz 48) ;=> "fizz"
    (fizzbuzz 70) ;=> "buzz"

    (defn fizzbuzz [n]
     (cond
      (divides? 3 n) "FIZZ"
      (divides? 5 n) "BUZZ"
      (divides? 15 n) "GOTCHA!"
      :else  ""))

    NOTE: in this function (fizzbuzz 45) will return "fizz" instead of "gotcha"
    because 3 divides 45 too and the condition for 3 is the first in the cond.


    Exercise 6

    Write a function (generic-doublificate x) that takes one argument and

    doubles it if it is a number,
    returns nil if it is an empty collection,
    if it is a list or a vector, returns two times the length of it
    returns true otherwise.

    You can use the following functions:

    (number? n) returns true if n is a number.
    (empty? coll) returns true if coll is empty.
    (list? coll) and (vector? coll) test if coll is a list or a vector.
    (count coll) returns the length of a list or a vector.

    i)        ;=> 2
    (generic-doublificate [1 2])    ;=> 4
    (generic-doublificate '(65 21)) ;=> 4
    (generic-doublificate {})       ;=> nil
    (generic-doublificate [])       ;=> nil
    (generic-doublificate {:a 1})   ;=> true

    (defn generic-doublificate [x]
     (cond
      (number? x) (* x 2)
      (empty? x) nil
      (or
       (list? x)
       (vector? x)) (* 2 (count x))
      :else true))


    BOOLEAN FUNCTIONS:
    If all the arguments to and are truthy, it returns the value of the last argument. Otherwise, it returns the value of the first falsey argument. Conversely, or returns either the first truthy value or the last falsey value.

    Exercise 7

    Write the function (not-teen? age), which returns true when teen? returns false and false otherwise.

    (not-teen? 13) ;=> false
    (not-teen? 25) ;=> true
    (not-teen? 12) ;=> true
    (not-teen? 19) ;=> false
    (not-teen? 20) ;=> true

    Exercise 8

    Write the function (leap-year? year), which returns true if year is a leap year, otherwise false. A year is a leap year if it is divisible by 4, except if it is divisible by 100, in which case it still is a leap year if it is divisible by 400.

    See Wikipedia for a simple pseudocode solution.

    (leap-year? 100) ;=> false
    (leap-year? 200) ;=> false
    (leap-year? 400) ;=> true
    (leap-year? 12)  ;=> true
    (leap-year? 20)  ;=> true
    (leap-year? 15)  ;=> false



    (defn leap-year? [year]
     (or
      (and
       (divides? 4 year)(not(divides? 100 year )))
      (divides? 400 year)))

